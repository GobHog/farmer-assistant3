package com.example

import ExposedNewsArticle
import NewsArticle
import NewsArticleService
import OllamaRequest
import OllamaResponse
import OnnxRubertPredictor
import RubertPredictor
import TfidfModel
import TranslationRequest
import TranslationResponse
import ch.qos.logback.core.net.ssl.SSL
import configureAuthentication
import configureGroupRoutes
import configureGroupTaskRoutes
import configureNewsArticleRoutes
import configureRoleRoutes
import dbQuery
import io.ktor.client.*
import io.ktor.client.call.*
import io.ktor.client.engine.cio.*
import io.ktor.client.plugins.contentnegotiation.*
import io.ktor.client.request.*
import io.ktor.client.statement.*
import io.ktor.http.*
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.application.*
import io.ktor.server.engine.*
import io.ktor.server.netty.*
import java.io.File
import io.ktor.server.engine.sslConnector
import kotlinx.coroutines.*
import kotlinx.serialization.json.Json
import org.jetbrains.exposed.sql.Database
import java.io.FileInputStream
import java.security.KeyStore
import java.time.LocalDateTime
import org.jsoup.Jsoup
import net.dankito.readability4j.Readability4J
import org.jetbrains.exposed.sql.SqlExpressionBuilder.eq
import org.jetbrains.exposed.sql.selectAll
import java.nio.file.Files
import java.nio.file.Paths
import java.time.LocalDate

fun main() {
    embeddedServer(Netty, port = 8080, host = "0.0.0.0", module = Application::module)
        .start(wait = true)
}
fun Application.module() {
    configureSerialization()
    configureSecurity()
    configureMonitoring()
    configureAuthentication()
    configureRouting()
    configureDatabases() // –ü–µ—Ä–µ–¥–∞—ë–º –Ω—É–∂–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã –≤ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    configureGroupRoutes()
    configureGroupTaskRoutes()
    configureNewsArticleRoutes()
    configureRoleRoutes()
    // –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    environment.monitor.subscribe(ApplicationStarted) {
        println("–ó–∞–ø—É—Å–∫ –ø–æ—Å–ª–µ —Å—Ç–∞—Ä—Ç–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")

        try {
            val modelPath = Paths.get("src/main/resources/ru_bert.onnx")
            val absPath = modelPath.toAbsolutePath()
            println("–ê–±—Å–æ–ª—é—Ç–Ω—ã–π –ø—É—Ç—å –∫ –º–æ–¥–µ–ª–∏: $absPath")

            if (Files.exists(modelPath)) {
                println("‚úÖ –ú–æ–¥–µ–ª—å –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: $modelPath")
            } else {
                println("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –ø–æ –ø—É—Ç–∏: $modelPath")
            }

            val predictor = try {
                OnnxRubertPredictor(absPath)
            } catch (t: Throwable) {
                println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ OnnxRubertPredictor: ${t.message}")
                t.printStackTrace()
                throw t
            }


            println("‚úÖ ONNX –º–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞.")


            val database = Database.connect(
                url = "jdbc:postgresql://${System.getenv("DB_HOST")}:${System.getenv("DB_PORT")}/${System.getenv("DB_NAME")}",
                driver = "org.postgresql.Driver",
                user = System.getenv("DB_USER"),
                password = System.getenv("DB_PASSWORD")
            )

            val newsArticleService = NewsArticleService(database)

            launch {
                while (true) {
                    try {
                        println("üïí –ó–∞–ø—É—Å–∫ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏: –ø–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π")

                        val latestNews = fetchLatestNews()
                        var addedAtLeastOne = false

                        for ((index, article) in latestNews.withIndex()) {
                            try {
                                if (newsArticleService.existsByLink(article.url)) {
                                    println("‚ö†Ô∏è –ù–æ–≤–æ—Å—Ç—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –≤ –±–∞–∑–µ: ${article.url}")
                                    continue
                                }

                                val articleText = fetchArticleText(article.url)
                                val score = predictor.predict(articleText)

                                if (score >= 0.5) {
                                    println("\n‚úÖ [${"%.2f".format(score * 100)}%] –ù–æ–≤–æ—Å—Ç—å ${index + 1}: ${article.content}")
                                    println("üîó URL: ${article.url}\n")

                                    val newsArticle = ExposedNewsArticle(
                                        content = articleText,
                                        creation_date = LocalDate.now().toString(),
                                        link = article.url
                                    )
                                    newsArticleService.create(newsArticle)
                                    addedAtLeastOne = true
                                    println("‚úÖ –ù–æ–≤–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö.")
                                }
                            } catch (e: Exception) {
                                println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å—Ç–∞—Ç—å–∏: ${e.message}")
                            }
                        }

                        if (addedAtLeastOne || SummaryStorage.lastSummary.isBlank()) {
                            println("üì• –ò–∑–≤–ª–µ–∫–∞–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ –ë–î...")
                            val recentNews = newsArticleService.readLatest5()

                            recentNews.forEachIndexed { i, news ->
                                println("üì∞ ${i + 1}) ${news.content.take(100)}...")
                            }

                            val combinedText = recentNews.joinToString("\n\n") { "‚Ä¢ ${it.content}" }
                            val summary = getSummaryFromOllama(combinedText.take(3000))

                            println("\nüìù –í—ã–∂–∏–º–∫–∞ –ø–æ –ø–æ—Å–ª–µ–¥–Ω–∏–º –Ω–æ–≤–æ—Å—Ç—è–º:\n$summary")
                        } else {
                            println("‚ÑπÔ∏è –ù–æ–≤–æ—Å—Ç–µ–π –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω–æ, –∏ –≤—ã–∂–∏–º–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
                        }

                        println("‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏—Ç–µ—Ä–∞—Ü–∏–∏ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–∏")
                    } catch (e: Exception) {
                        println("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –∑–∞–¥–∞—á–µ: ${e.message}")
                    }

                    delay(3 * 60 * 1000L) // 10 –º–∏–Ω—É—Ç
                }
            }

        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –º–æ–¥–µ–ª–∏: ${e.message}")
        }

        println("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏")
    }




}
// --- –û–±–Ω–æ–≤–ª—ë–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è ---
suspend fun getSummaryFromOllama(text: String): String {
    val prompt = """
    –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ –≤—ã–¥–µ–ª–∏ —Ç–æ–ª—å–∫–æ —Ç–µ —Ñ–∞–∫—Ç—ã, –∫–æ—Ç–æ—Ä—ã–µ –æ–∫–∞–∑—ã–≤–∞—é—Ç —Ä–µ–∞–ª—å–Ω–æ–µ –≤–ª–∏—è–Ω–∏–µ –Ω–∞ —Å–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ. 
    –ò—Å–ø–æ–ª—å–∑—É–π –¥–æ 4 –ª–∞–∫–æ–Ω–∏—á–Ω—ã—Ö –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–π –±–µ–∑ –≤–≤–æ–¥–Ω—ã—Ö —Å–ª–æ–≤ –∏ –æ—Ü–µ–Ω–æ—á–Ω—ã—Ö –≤—ã—Ä–∞–∂–µ–Ω–∏–π. 
    –ù–µ —É–ø–æ–º–∏–Ω–∞–π –Ω–æ–≤–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ —Å–≤—è–∑–∞–Ω—ã —Å –∞–≥—Ä–∞—Ä–Ω—ã–º —Å–µ–∫—Ç–æ—Ä–æ–º, –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å –≤ —Ç–µ–∫—Å—Ç–µ. 
    –û—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –∏ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã–µ —Ñ–∞–∫—Ç—ã:

    $text
""".trimIndent()



    val request = OllamaRequest(
        model = "llama3:latest",
        prompt = prompt,
        stream = false
    )

    return try {
        HttpClient(CIO) {
            install(ContentNegotiation) {
                json(Json { ignoreUnknownKeys = true })
            }
        }.use { client ->
            val rawResponse = client.post("http://31.128.51.62:11434/api/generate") {
                contentType(ContentType.Application.Json)
                setBody(request)
            }.bodyAsText()

            println("Raw Ollama response: $rawResponse")

            val response = Json { ignoreUnknownKeys = true }.decodeFromString<OllamaResponse>(rawResponse)
            val cleanedSummary = response.response.trim()

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            SummaryStorage.lastSummary = cleanedSummary

            cleanedSummary
        }
    } catch (e: Exception) {
        println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ Ollama: ${e.message}")
        "‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –≤—ã–∂–∏–º–∫—É."
    }
}



suspend fun fetchLatestNews(): List<NewsArticle> = withContext(Dispatchers.IO) {
    val doc = Jsoup.connect("https://iz.ru/tag/selskoe-khoziaistvo").get()

    val newsBoxes = doc.select("div.tag-materials-item__box").take(5)

    newsBoxes.mapNotNull { box ->
        val linkElement = box.selectFirst("a.tag-materials-item") ?: return@mapNotNull null
        val url = linkElement.absUrl("href")

        return@mapNotNull try {
            val html = Jsoup.connect(url)
                .userAgent("Mozilla/5.0")
                .get()
                .html()

            val readability = Readability4J(url, html)
            val article = readability.parse()

            val title = article.title?.trim()
            if (!title.isNullOrBlank() && url.isNotBlank()) {
                NewsArticle(
                    url = url,
                    creation_date = LocalDate.now().toString(),
                    content = title
                )
            } else {
                null
            }
        } catch (e: Exception) {
            println("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ $url: ${e.message}")
            null
        }
    }
}

suspend fun fetchArticleText(url: String): String = withContext(Dispatchers.IO) {
    val doc = Jsoup.connect(url)
        .userAgent("Mozilla/5.0")
        .get()
        .html()
    val readability = Readability4J(url, doc)
    val article = readability.parse()
    article.title ?: ""
}


//fun main() {
//    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JKS —Ñ–æ—Ä–º–∞—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ keystore
//    val keyStore = KeyStore.getInstance("PKCS12")
//    keyStore.load(FileInputStream("my_keystore.jks"), "123456".toCharArray()) // –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –ø–∞—Ä–æ–ª—å
//
//    embeddedServer(Netty, environment = applicationEngineEnvironment {
//        sslConnector(
//            keyStore = keyStore,
//            keyAlias = "mykey", // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ alias –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
//            keyStorePassword = { "123456".toCharArray() }, // –ü–∞—Ä–æ–ª—å –∫ keystore
//            privateKeyPassword = { "123456".toCharArray() } // –ü–∞—Ä–æ–ª—å –∫ –ø—Ä–∏–≤–∞—Ç–Ω–æ–º—É –∫–ª—é—á—É
//        ) {
//            port = 8443
//            host = "0.0.0.0"
//        }
//
//        module {
//            // –í–∞—à–∏ —Ä–æ—É—Ç—ã –∏ –ª–æ–≥–∏–∫–∞
//        }
//    }).start(wait = true)
//}
//
//fun loadKeyStore(filePath: String, password: String): KeyStore {
//    // –ò—Å–ø–æ–ª—å–∑—É–µ–º JKS —Ñ–æ—Ä–º–∞—Ç
//    val keyStore = KeyStore.getInstance("JKS")
//    FileInputStream(filePath).use { fis ->
//        keyStore.load(fis, password.toCharArray())
//    }
//    return keyStore
//}