import com.auth0.jwt.JWT
import com.auth0.jwt.algorithms.Algorithm
import com.auth0.jwt.exceptions.JWTVerificationException
import com.example.ExposedUser
import com.example.UserService
import io.ktor.server.application.*
import io.ktor.server.auth.*
import io.ktor.server.response.*
import io.ktor.server.request.*
import io.ktor.server.routing.*
import io.ktor.http.HttpStatusCode
import io.ktor.serialization.kotlinx.json.*
import io.ktor.server.plugins.contentnegotiation.*
import kotlinx.serialization.Serializable
import kotlinx.serialization.json.Json
import org.jetbrains.exposed.sql.Database
import org.mindrot.jbcrypt.BCrypt
import java.util.*
import java.util.logging.Logger
import javax.mail.*
import javax.mail.internet.InternetAddress
import javax.mail.internet.MimeMessage
import java.util.Base64

fun Application.configureAuthentication() {
    val database = Database.connect(
        url = "jdbc:postgresql://${System.getenv("DB_HOST")}:${System.getenv("DB_PORT")}/${System.getenv("DB_NAME")}",
        driver = "org.postgresql.Driver",
        user = System.getenv("DB_USER"),
        password = System.getenv("DB_PASSWORD")
    )

    val userService = UserService(database)
    val logger = Logger.getLogger("RegistrationLogger")

    routing {
        // –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        post("/register") {
            val user = call.receive<RegistrationRequest>()

            val existingUser = userService.getUserByEmail(user.mail)

            if (existingUser != null) {
                call.respond(
                    HttpStatusCode.BadRequest,
                    RegisterResponse(success = false, message = "–ü–æ—á—Ç–∞ —É–∂–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è")
                )
                return@post
            }

            val hashedPassword = BCrypt.hashpw(user.password, BCrypt.gensalt())

            val newUser = ExposedUser(
                surname = user.surname,
                name = user.name,
                patronymic = null,
                mail = user.mail,
                password = hashedPassword,
                photo = null,
                group_id = null,
                role_id = null,
                email_confirmed = false
            )

            try {
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏ –ø–æ–ª—É—á–∞–µ–º –µ–≥–æ ID
                val userId = userService.create(newUser)

                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫—É —Å userId
                val confirmationLink = generateConfirmationLink(user.mail, userId)

                sendEmail(
                    to = user.mail,
                    subject = "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ—á—Ç—ã",
                    content = "–ü–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å–ª–µ–¥—É—é—â–µ–π —Å—Å—ã–ª–∫–µ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –ø–æ—á—Ç—ã: $confirmationLink"
                )

                call.respond(
                    HttpStatusCode.Created,
                    RegisterResponse(
                        success = true,
                        message = "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è"
                    )
                )
            } catch (e: IllegalArgumentException) {
                call.respond(
                    HttpStatusCode.BadRequest,
                    RegisterResponse(success = false, message = e.message ?: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏")
                )
            } catch (e: Exception) {
                call.respond(
                    HttpStatusCode.InternalServerError,
                    RegisterResponse(success = false, message = "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞")
                )
            }
        }


        get("/confirm-email") {
            val token = call.request.queryParameters["token"]

            if (token != null) {
                try {
                    val decodedJWT = JWT.require(Algorithm.HMAC256("mySuperSecretKey"))
                        .withIssuer("ktor-app")
                        .build()
                        .verify(token)

                    val email = decodedJWT.claims["email"]?.asString()

                    if (email != null) {
                        val user = userService.getUserByEmail(email)
                        if (user != null && !user.email_confirmed) {
                            userService.updateEmailConfirmationStatus(user.user_id, true)

                            call.respond(
                                HttpStatusCode.OK,
                                "–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ –≤–æ–π—Ç–∏."
                            )
                        } else {
                            call.respond(HttpStatusCode.BadRequest, "–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –ø–æ—á—Ç—É.")
                        }
                    } else {
                        call.respond(HttpStatusCode.BadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
                    }
                } catch (e: JWTVerificationException) {
                    call.respond(HttpStatusCode.BadRequest, "–ù–µ–≤–µ—Ä–Ω—ã–π —Ç–æ–∫–µ–Ω.")
                }
            } else {
                call.respond(HttpStatusCode.BadRequest, "–¢–æ–∫–µ–Ω –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω.")
            }
        }




        // –õ–æ–≥–∏–Ω –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ JWT —Ç–æ–∫–µ–Ω–∞
        post("/login") {
            val user = call.receive<LoginRequest>()

            if (user.mail.isBlank() || user.password.isBlank()) {
                call.respond(HttpStatusCode.BadRequest, "Email –∏ –ø–∞—Ä–æ–ª—å –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã")
                return@post
            }

            val storedUser = userService.getUserByEmail(user.mail)

            if (storedUser != null) {
                // üîê –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è email
                if (!storedUser.email_confirmed) {
                    call.respond(HttpStatusCode.Forbidden, "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –≤–∞—à—É –ø–æ—á—Ç—É –ø–µ—Ä–µ–¥ –≤—Ö–æ–¥–æ–º")
                    return@post
                }

                // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–∞—Ä–æ–ª—è
                if (BCrypt.checkpw(user.password, storedUser.password)) {
                    val token = createJWT(storedUser.mail, storedUser.user_id)
                    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç –æ—Ç–≤–µ—Ç–∞
                    val response = LoginResponse(
                        success = true,
                        message = "–£—Å–ø–µ—à–Ω—ã–π –≤—Ö–æ–¥",
                        group_id = storedUser.group_id,  // –î–æ–±–∞–≤–ª—è–µ–º group_id
                        token = token,
                        id = storedUser.user_id,  // –î–æ–±–∞–≤–ª—è–µ–º user_id –∑–¥–µ—Å—å
                        user= SettingsUser(storedUser.surname, storedUser.name, storedUser.patronymic, storedUser.mail, storedUser.photo.toString())
                    )
                    // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ –ø–µ—Ä–µ–¥ –æ—Ç–ø—Ä–∞–≤–∫–æ–π
//                    println("Sending response: ${storedUser.group_id}")  // –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞

                    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç —Å —Ç–æ–∫–µ–Ω–æ–º –∏ group_id
                    call.respond(HttpStatusCode.OK, response)
                }
                else {
                    call.respond(HttpStatusCode.Unauthorized, "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
                }
            } else {
                call.respond(HttpStatusCode.Unauthorized, "–ù–µ–≤–µ—Ä–Ω—ã–µ —É—á–µ—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ")
            }
        }


    }
}

fun createJWT(email: String, userId: Long): String {
    val algorithm = Algorithm.HMAC256("mySuperSecretKey")
    return JWT.create()
        .withIssuer("ktor-app")
        .withClaim("email", email)
        .withClaim("user_id", userId) // <-- –¥–æ–±–∞–≤–ª—è–µ–º user_id
        .sign(algorithm)
}
fun verifyTokenAndGetUserId(token: String): Long? {
    return try {
        val algorithm = Algorithm.HMAC256("mySuperSecretKey")
        val verifier = JWT.require(algorithm)
            .withIssuer("ktor-app")
            .build()

        val decodedJWT = verifier.verify(token)
        decodedJWT.getClaim("user_id").asLong()  // <-- –ü–æ–ª—É—á–∞–µ–º user_id
    } catch (e: Exception) {
        e.printStackTrace()
        null
    }
}

fun generateConfirmationLink(email: String, id: Long): String {
    val token = createJWT(email, id)
    val host = System.getenv("APP_HOST") ?: "http://31.128.51.62:8080"
    return "$host/confirm-email?token=$token"
}


fun sendEmail(to: String, subject: String, content: String) {
    val fromEmail = "noreply.farmer_assistant@mail.ru"
    val password = "im67hQxTYp3PBxmcqHzR" // –ü–∞—Ä–æ–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏–ª–∏ –æ–±—ã—á–Ω—ã–π (–µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω)

    val props = Properties().apply {
        put("mail.smtp.host", "smtp.mail.ru")
        put("mail.smtp.port", "465")
        put("mail.smtp.auth", "true")
        put("mail.smtp.socketFactory.port", "465")
        put("mail.smtp.socketFactory.class", "javax.net.ssl.SSLSocketFactory")
        put("mail.smtp.socketFactory.fallback", "false")
    }

    val session = Session.getInstance(props, object : Authenticator() {
        override fun getPasswordAuthentication(): PasswordAuthentication {
            return PasswordAuthentication(fromEmail, password)
        }
    })

    try {
        val message = MimeMessage(session).apply {
            setFrom(InternetAddress(fromEmail))
            setRecipients(Message.RecipientType.TO, InternetAddress.parse(to))
            setSubject(subject) // –ò—Å–ø–æ–ª—å–∑—É–π –º–µ—Ç–æ–¥ setSubject, –∞ –Ω–µ –ø—Ä–æ—Å—Ç–æ –ø—Ä–∏—Å–≤–∞–∏–≤–∞–Ω–∏–µ
            setText(content)
        }


        Transport.send(message)
        println("–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ $to")
    } catch (e: MessagingException) {
        e.printStackTrace()
        println("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏—Å—å–º–∞: ${e.message}")
    }
}

